import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

export const loadRecipes = createAsyncThunk(
  "allRecipes/getAllRecipes",
  async () => {
    const data = await fetch("api/recipes?limit=10");
    const json = await data.json();
    return json;
  }
);

const sliceOptions = {
  name: "allRecipes",
  initialState: {
    recipes: [],
    isLoading: false,   // initial loading state
    hasError: false,    // initial error state
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(loadRecipes.pending, (state) => {
        state.isLoading = true;
        state.hasError = false;
      })
      .addCase(loadRecipes.fulfilled, (state, action) => {
        state.isLoading = false;
        state.hasError = false;
        state.recipes = action.payload;
      })
      .addCase(loadRecipes.rejected, (state) => {
        state.isLoading = false;
        state.hasError = true;
      });
  },
};

export const allRecipesSlice = createSlice(sliceOptions);

export const selectAllRecipes = (state) => state.allRecipes.recipes;

export default allRecipesSlice.reducer;
