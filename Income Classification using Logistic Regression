import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score, roc_curve, roc_auc_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
col_names = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 
             'marital-status', 'occupation', 'relationship', 'race', 'sex',
             'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']
df = pd.read_csv('adult.data', header=None, names=col_names)

# Clean columns by stripping extra whitespace for columns of type "object"
for c in df.select_dtypes(include=['object']).columns:
    df[c] = df[c].str.strip()
print(df.head())

# 1. Check Class Imbalance
print(df['income'].value_counts())

# 2. Create feature dataframe X with feature columns and dummy variables for categorical features
feature_cols = ['age', 'capital-gain', 'capital-loss', 'hours-per-week', 'sex', 'race', 'education']
X = pd.get_dummies(df[feature_cols], drop_first=True)  # Convert categorical variables into dummy/indicator variables

# 3. Create a heatmap of X data to see feature correlation
plt.figure(figsize=(10, 8))
sns.heatmap(X.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Feature Correlation Heatmap')
plt.show()

# 4. Create output variable y which is binary, 0 when income is less than 50k, 1 when greater than 50k
y = (df['income'] == '>50K').astype(int)

# 5a. Split data into a train and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# 5b. Fit LR model with sklearn on train set, and predicting on the test set
log_reg = LogisticRegression(C=0.05, penalty='l1', solver='liblinear')
log_reg.fit(X_train, y_train)
y_pred = log_reg.predict(X_test)

# 6. Print model parameters (intercept and coefficients)
print('Model Parameters, Intercept:', log_reg.intercept_)
print('Model Parameters, Coeff:', log_reg.coef_)

# 7. Evaluate the predictions of the model on the test set. Print the confusion matrix and accuracy score
print('Confusion Matrix on test set:')
print(confusion_matrix(y_test, y_pred))
print('Accuracy Score on test set:', accuracy_score(y_test, y_pred))

# 8. Create new DataFrame of the model coefficients and variable names; sort values based on coefficient
coeff_df = pd.DataFrame({
    'Variable': X.columns,
    'Coefficient': log_reg.coef_[0]
})
coeff_df = coeff_df[coeff_df['Coefficient'] != 0].sort_values(by='Coefficient')
print(coeff_df)

# 9. Barplot of the coefficients sorted in ascending order
plt.figure(figsize=(8, 6))
sns.barplot(x='Coefficient', y='Variable', data=coeff_df, palette='coolwarm')
plt.title('Logistic Regression Coefficients')
plt.show()

# 10. Plot the ROC curve and print the AUC value
y_pred_prob = log_reg.predict_proba(X_test)[:, 1]  # Get probabilities for the positive class
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
auc = roc_auc_score(y_test, y_pred_prob)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label=f'ROC curve (AUC = {auc:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Diagonal line
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

print(f"AUC Value: {auc:.2f}")
