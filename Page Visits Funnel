import pandas as pd

# Try reading the CSV files and checking if DataFrames are loaded
try:
    visits = pd.read_csv('visits.csv', parse_dates=[1])
    cart = pd.read_csv('cart.csv', parse_dates=[1])
    checkout = pd.read_csv('checkout.csv', parse_dates=[1])
    purchase = pd.read_csv('purchase.csv', parse_dates=[1])
    
    # Inspect DataFrames
    print("Visits DataFrame:")
    print(visits.head())
    
    print("\nCart DataFrame:")
    print(cart.head())
    
    print("\nCheckout DataFrame:")
    print(checkout.head())
    
    print("\nPurchase DataFrame:")
    print(purchase.head())
    
    # 1. Merge visits and cart
    merged_df = visits.merge(cart, how='left', on='user_id')
    print("\nMerged DataFrame (visits + cart):")
    print(merged_df.head())
    
    # 2. Calculate percentage of users who visited but didn't place a t-shirt in their cart
    total_users = len(visits)
    users_without_cart = len(merged_df[merged_df['cart_time'].isnull()])
    percentage_without_cart = (float(users_without_cart) / total_users) * 100
    print(f"\nPercentage of users who visited but did not place a t-shirt in their cart: {percentage_without_cart:.2f}%")
    
    # 3. Repeat left merge for cart and checkout and count null values
    merged_cart_checkout = cart.merge(checkout, how='left', on='user_id')
    users_without_checkout = len(merged_cart_checkout[merged_cart_checkout['checkout_time'].isnull()])
    percentage_without_checkout = (float(users_without_checkout) / len(cart)) * 100
    print(f"\nPercentage of users who put items in their cart but did not proceed to checkout: {percentage_without_checkout:.2f}%")
    
    # 4. Merge all four steps of the funnel (visits -> cart -> checkout -> purchase)
    all_data = visits.merge(cart, how='left', on='user_id')\
                     .merge(checkout, how='left', on='user_id')\
                     .merge(purchase, how='left', on='user_id')
    print("\nMerged DataFrame (all funnel steps):")
    print(all_data.head())
    
    # 5. Calculate percentage of users who proceeded to checkout but did not purchase
    users_without_purchase = len(all_data[all_data['purchase_time'].isnull()])
    users_proceeded_to_checkout = len(all_data[all_data['checkout_time'].notnull()])
    percentage_without_purchase = (float(users_without_purchase) / users_proceeded_to_checkout) * 100
    print(f"\nPercentage of users who proceeded to checkout but did not purchase a t-shirt: {percentage_without_purchase:.2f}%")
    
    # 6. Determine the weakest step in the funnel (highest drop-off percentage)
    funnel_steps = {
        'Visited but not in Cart': percentage_without_cart,
        'In Cart but not in Checkout': percentage_without_checkout,
        'In Checkout but not Purchased': percentage_without_purchase
    }
    
    weakest_step = min(funnel_steps, key=funnel_steps.get)
    print(f"\nThe weakest step in the funnel is: {weakest_step}")
    
    # Suggest a solution based on the weakest step
    if weakest_step == 'In Cart but not in Checkout':
        print("Cool T-Shirts Inc. may want to simplify the checkout process or add incentives to encourage users to complete checkout.")
    elif weakest_step == 'In Checkout but not Purchased':
        print("They may want to improve trust signals or offer discounts to convert users into purchasers.")
    
    # 7. Calculate average time to purchase
    all_data['time_to_purchase'] = all_data['purchase_time'] - all_data['visit_time']
    print("\nAverage Time to Purchase:")
    print(all_data[['user_id', 'time_to_purchase']].head())
    
    # 8. Calculate and print average time to purchase
    average_time_to_purchase = all_data['time_to_purchase'].mean()
    print(f"\nAverage time to purchase: {average_time_to_purchase}")
    
except FileNotFoundError as e:
    print("Error: One or more CSV files were not found.")
except Exception as e:
    print(f"An error occurred: {e}")
