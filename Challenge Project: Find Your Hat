const prompt = require('prompt-sync')({ sigint: true });

const hat = '^';
const hole = 'O';
const fieldCharacter = '░';
const pathCharacter = '*';

class Field {
  constructor(field) {
    this.field = field;
    this.playerX = 0;
    this.playerY = 0;
  }

  print() {
    const displayString = this.field
      .map(row => row.join(''))
      .join('\n');
    console.log(displayString);
  }

  isInBounds(x, y) {
    return y >= 0 && y < this.field.length && x >= 0 && x < this.field[0].length;
  }

  isHole(x, y) {
    return this.field[y][x] === hole;
  }

  isHat(x, y) {
    return this.field[y][x] === hat;
  }

  play() {
    this.print();
    while (true) {
      const move = prompt('Which way? (u/d/l/r) ').toLowerCase();
      let newX = this.playerX;
      let newY = this.playerY;

      if (move === 'u') newY -= 1;
      else if (move === 'd') newY += 1;
      else if (move === 'l') newX -= 1;
      else if (move === 'r') newX += 1;
      else {
        console.log('Invalid input! Please enter u, d, l, or r.');
        continue;
      }

      if (!this.isInBounds(newX, newY)) {
        console.log('Out of bounds! You lose.');
        break;
      } else if (this.isHole(newX, newY)) {
        console.log('You fell in a hole! Game over.');
        break;
      } else if (this.isHat(newX, newY)) {
        console.log('You found your hat! You win!');
        break;
      } else {
        // Move player
        this.field[this.playerY][this.playerX] = pathCharacter; // Mark old position as path
        this.playerX = newX;
        this.playerY = newY;
        this.field[this.playerY][this.playerX] = pathCharacter;
        this.print();
      }
    }
  }
}

// Example field:
const myField = new Field([
  ['*', '░', 'O', '░'],
  ['░', 'O', '░', '░'],
  ['░', '░', '░', 'O'],
  ['O', '░', '^', '░'],
]);

myField.play();
