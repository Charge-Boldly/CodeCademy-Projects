# Names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 
         'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 
         'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 
         'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 
         'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# Months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 
          'September', 'September', 'September', 'September', 'September', 'October', 
          'September', 'August', 'September', 'September', 'August', 'August', 
          'September', 'September', 'August', 'October', 'September', 'September', 
          'July', 'August', 'September', 'October', 'August', 'September', 'October', 
          'September', 'September', 'October']

# Years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 
         1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 
         2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# Maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 
                       160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 
                       180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 
                       180, 175, 160]

# Areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], 
                  ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 
                   'Atlantic Canada'], 
                  ['The Bahamas', 'Northeastern United States'], 
                  ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 
                   'The Bahamas', 'Bermuda'], 
                  ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], 
                  ['Jamaica', 'Yucatn Peninsula'], 
                  ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 
                   'Virginia'], 
                  ['Southeastern United States', 'Northeastern United States', 
                   'Southwestern Quebec'], 
                  ['Bermuda', 'New England', 'Atlantic Canada'], 
                  ['Lesser Antilles', 'Central America'], 
                  ['Texas', 'Louisiana', 'Midwestern United States'], 
                  ['Central America'], 
                  ['The Caribbean', 'Mexico', 'Texas'], 
                  ['Cuba', 'United States Gulf Coast'], 
                  ['The Caribbean', 'Central America', 'Mexico', 
                   'United States Gulf Coast'], 
                  ['Mexico'], 
                  ['The Caribbean', 'United States East coast'], 
                  ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 
                   'South Texas'], 
                  ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 
                   'Mexico'], 
                  ['The Caribbean', 'United States East Coast'], 
                  ['The Bahamas', 'Florida', 'United States Gulf Coast'], 
                  ['Central America', 'Yucatn Peninsula', 'South Florida'], 
                  ['Greater Antilles', 'Bahamas', 'Eastern United States', 
                   'Ontario'], 
                  ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], 
                  ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], 
                  ['Bahamas', 'United States Gulf Coast'], 
                  ['Cuba', 'United States Gulf Coast'], 
                  ['Greater Antilles', 'Central America', 'Florida'], 
                  ['The Caribbean', 'Central America'], 
                  ['Nicaragua', 'Honduras'], 
                  ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 
                   'Atlantic Canada'], 
                  ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 
                   'U.S. Virgin Islands', 'Cuba', 'Florida'], 
                  ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 
                   'Dominican Republic', 'Turks and Caicos Islands'], 
                  ['Central America', 'United States Gulf Coast (especially Florida Panhandle']] 

# Damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', 
           '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', 
           '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', 
           '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', 
           '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# Deaths for each hurricane
deaths = [90, 4000, 16, 3103, 179, 184, 408, 682, 5, 1023, 43, 319, 688, 259, 37, 
          11, 2068, 269, 318, 107, 65, 19325, 51, 124, 17, 1836, 125, 87, 45, 
          133, 603, 138, 3057, 74]

# Define the conversion dictionary
conversion = {
    "M": 1000000,
    "B": 1000000000
}

# Define the function to update damages
def update_damages(damages):
    updated_damages = []
    for damage in damages:
        if damage == 'Damages not recorded':
            updated_damages.append(damage)  # Retain unchanged
        else:
            # Extract prefix and value
            value = float(damage[:-1])  # Convert to float by slicing off the last character
            prefix = damage[-1]  # Get the last character (M or B)
            updated_damages.append(value * conversion[prefix])  # Convert using the conversion dictionary
    return updated_damages

# Get the updated damages
updated_damages = update_damages(damages)

# Define the function to create the hurricane dictionary
def create_hurricane_dict(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths):
    hurricanes = {}
    for index in range(len(names)):
        hurricane_name = names[index]
        hurricanes[hurricane_name] = {
            "Name": hurricane_name,
            "Month": months[index],
            "Year": years[index],
            "Max Sustained Wind": max_sustained_winds[index],
            "Areas Affected": areas_affected[index],
            "Damage": updated_damages[index],
            "Deaths": deaths[index]
        }
    return hurricanes

# Create the hurricane dictionary
hurricanes_data = create_hurricane_dict(
    names,
    months,
    years,
    max_sustained_winds,
    areas_affected,
    updated_damages,
    deaths
)

# Print the resulting hurricanes dictionary
for name, details in hurricanes_data.items():
    print(name, ":", details)

# Define a function to organize hurricanes by year
def organize_hurricanes_by_year(hurricanes):
    hurricanes_by_year = {}
    
    for hurricane_name, details in hurricanes.items():
        current_year = details['Year']
        current_cane = details  # The hurricane dictionary

        # If the year is not in the new dictionary, initialize it
        if current_year not in hurricanes_by_year:
            hurricanes_by_year[current_year] = [current_cane]
        else:
            # Append the hurricane to the existing list for that year
            hurricanes_by_year[current_year].append(current_cane)
    
    return hurricanes_by_year

# Function to find the most affected area
def find_most_affected_area(hurricanes):
    affected_areas_count = {}

    # Count occurrences of areas affected by hurricanes
    for hurricane in hurricanes.values():
        for area in hurricane['Areas Affected']:
            if area not in affected_areas_count:
                affected_areas_count[area] = 1
            else:
                affected_areas_count[area] += 1

    # Find the area with the maximum occurrences
    most_affected_area = max(affected_areas_count, key=affected_areas_count.get)
    return most_affected_area, affected_areas_count[most_affected_area]

# Function to rate hurricanes based on damage scale
def rate_hurricane_damage(damage):
    if damage == 'Damages not recorded':
        return 'No rating'
    
    # Rate based on damage
    if damage < 100000000:
        return 'Low'
    elif damage < 1000000000:
        return 'Moderate'
    else:
        return 'High'

# Generate ratings for each hurricane based on damage
for hurricane_name, details in hurricanes_data.items():
    damage_rating = rate_hurricane_damage(details['Damage'])
    details['Damage Rating'] = damage_rating

# Print updated hurricane details with damage ratings
for name, details in hurricanes_data.items():
    print(name, ":", details)
